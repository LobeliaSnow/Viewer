//今後最適化していきたい
/////////////////////////////////////////////////////////////////////////////////////////
// dxd
/////////////////////////////////////////////////////////////////////////////////////////
int メッシュ数
(メッシュ数){
	int インデックス数
	int UV数
	struct Vertex{
		Vector4 pos;
		Vector4 normal;
		Vector2 tex;
	};
	(インデクス数){
		Vertex構造体
	}
	int マテリアル名の長さ
	char[マテリアル名の長さ] マテリアル名
}
(メッシュ数){
	bool スキンがあるかどうかのフラグtrueであってfalseでない
	if(スキンがあるとき){

	}
}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// mat
/////////////////////////////////////////////////////////////////////////////////////////
int マテリアル数
(マテリアル数){
	int マテリアル名の長さ
	char[マテリアル名の長さ] マテリアル名
	int テクスチャ名の長さ
	char[テクスチャ名の長さ] テクスチャ名
}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// anm
/////////////////////////////////////////////////////////////////////////////////////////
int アニメーション名サイズ
char[アニメーション名サイズ] アニメーション名
int 1秒あたりのフレーム数
int キーフレーム数
int メッシュ数
(メッシュ数){
	int クラスター数
	(クラスター数){
		Matrix キーフレーム
	}
}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
